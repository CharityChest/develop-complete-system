version: '3.9'

x-kong-config:
  &kong-env
  KONG_DATABASE: postgres
  KONG_PG_DATABASE: ${KONG_PG_DATABASE}
  KONG_PG_HOST: postgres-db
  KONG_PG_USER: ${KONG_PG_USER}
  KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
  KONG_LOG_LEVEL: debug

x-cc-environment-config:
  &cc-env
  ENVIRONMENT: "development"

volumes:
  kong_data: {}
  kong_prefix_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs
  kong_tmp_vol:
    driver_opts:
      type: tmpfs
      device: tmpfs

networks:
  kong-net:
    external: false
  services:
    external: false

services:
  kong-migrations:
    image: "${KONG_DOCKER_TAG}"
    command: kong migrations bootstrap
    depends_on:
      - postgres-db
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure

  kong-migrations-up:
    image: "${KONG_DOCKER_TAG}"
    command: kong migrations up && kong migrations finish
    depends_on:
      - postgres-db
    environment:
      <<: *kong-env
    networks:
      - kong-net
    restart: on-failure

  kong:
    image: "${KONG_DOCKER_TAG}"
    user: "${KONG_USER:-kong}"
    environment:
      <<: *kong-env
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_PROXY_LISTEN: "${KONG_PROXY_LISTEN:-0.0.0.0:8000}"
      KONG_ADMIN_LISTEN: "${KONG_ADMIN_LISTEN:-0.0.0.0:8001}"
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PREFIX: ${KONG_PREFIX:-/var/run/kong}
      KONG_DECLARATIVE_CONFIG: "/opt/kong/kong.yaml"
    networks:
      - kong-net
      - services
    ports:
      # The following two environment variables default to an insecure value (0.0.0.0)
      # according to the CIS Security test.
      - "${KONG_INBOUND_PROXY_LISTEN:-0.0.0.0}:9000:8000/tcp"
      - "${KONG_INBOUND_SSL_PROXY_LISTEN:-0.0.0.0}:9443:8443/tcp"
      # Making them mandatory but undefined, like so would be backwards-breaking:
      # - "${KONG_INBOUND_PROXY_LISTEN?Missing inbound proxy host}:8000:8000/tcp"
      # - "${KONG_INBOUND_SSL_PROXY_LISTEN?Missing inbound proxy ssl host}:8443:8443/tcp"
      # Alternative is deactivating check 5.13 in the security bench, if we consider Kong's own config to be enough security here

      - "127.0.0.1:9001:8001/tcp"
      - "127.0.0.1:9444:8444/tcp"
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    read_only: true
    volumes:
      - kong_prefix_vol:${KONG_PREFIX:-/var/run/kong}
      - kong_tmp_vol:/tmp
      - ./kong-config:/opt/kong
    security_opt:
      - no-new-privileges
  konga:
    image: pantsel/konga
    environment:
      DB_ADAPTER: postgres
      DB_HOST: postgres-db
      DB_PORT: 5432
      DB_USER: ${KONGA_PG_USER}
      DB_PASSWORD: ${KONGA_PG_PASSWORD}
      DB_DATABASE: ${KONGA_PG_DATABASE}
      HOST: 0.0.0.0
      PORT: 1337
      SECRET: ${SECRET}
    depends_on:
      - postgres-db
    ports:
      - "1337:1337"
    networks:
      - kong-net
      - services
    restart: on-failure
  kong-deck:
    image: charity-chest/deck-develop
    build:
      context: ./kong-deck
      dockerfile: ./Dockerfile
      args:
        - LOGIN_FRONTEND_SERVICE_URL=http://cc-oauth2-forward-tool-client:3000/
        - LOGIN_FRONTEND_ROUTE_HOST=${LOGIN_FRONTEND_ROUTE_HOST}
    depends_on:
      - kong
    networks:
      - kong-net
    environment:
      - KONG_ADMIN_URL=http://kong:8001
      - WAIT_HOSTS=kong:8001
  postgres-db:
    image: postgres:9.5
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
      KONGA_PG_USER: ${KONGA_PG_USER}
      KONGA_PG_PASSWORD: ${KONGA_PG_PASSWORD}
      KONGA_PG_DATABASE: ${KONGA_PG_DATABASE}
    healthcheck:
      test:
        [
          "CMD",
          "pg_isready",
          "-d",
          "${KONG_PG_DATABASE:-kong}",
          "-U",
          "${KONG_PG_USER:-kong}"
        ]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    stdin_open: true
    tty: true
    networks:
      - services
    volumes:
      - kong_data:/var/lib/postgresql/data
      - ./postgres-init:/docker-entrypoint-initdb.d
  cc-db-developing:
    image: mysql:8.0.33-debian
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - services
  cc-redis-develop:
    image: redis:7.0.12-alpine3.18
    command: redis-server --user ${REDIS_USERNAME} on +@all ~* \>${REDIS_PASSWORD}
    ports:
      - "6379:6379"
  mailhog-develop:
    container_name: mailhog-develop
    image: mailhog/mailhog
    logging:
      driver: 'none'  # disable saving logs
    ports:
      - "1026:1025" # smtp server
      - "8026:8025" # web ui
    networks:
      - services
  cc-backend-develop:
    image: charity-chest/cc-backend-develop
    build:
      context: ../cc-backend
      dockerfile: ./docker/develop/Dockerfile
      args:
        - GOLANG_VERSION=${CC_BACKEND_GOLANG_VERSION}
        - ALPINE_VERSION=${CC_BACKEND_ALPINE_VERSION}
    ports:
      - "8080:8080"
      - "8000:8000"
      - "40000:40000"
    depends_on:
      - cc-db-developing
    environment:
      <<: *cc-env
      DB_HOST: "cc-db-developing"
      DB_PORT: "3306"
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: "cc_backend_develop"
    networks:
      - services
  cc-backend-root-console-develop:
    image: charity-chest/cc-backend-root-console-develop
    build:
      context: ../cc-backend-root-console
      dockerfile: ./docker/develop/Dockerfile
      args:
        - GOLANG_VERSION=${CC_BACKEND_ROOT_CONSOLE_GOLANG_VERSION}
        - ALPINE_VERSION=${CC_BACKEND_ROOT_CONSOLE_ALPINE_VERSION}
    ports:
      - "8081:8080"
      - "8001:8000"
      - "40001:40000"
    depends_on:
      - cc-db-developing
    environment:
      DB_HOST: "cc-db-developing"
      DB_PORT: "3306"
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: "cc_backend_root_console_develop"
    networks:
      - services
  cc-root-console:
    image: charity-chest/cc-root-console-develop
    build:
      context: ../cc-root-console/cc-root-console
      dockerfile: ../docker/develop/Dockerfile
      args:
        - NODE_VERSION=${CC_ROOT_CONSOLE_NODE_VERSION}
        - ALPINE_VERSION=${CC_ROOT_CONSOLE_ALPINE_VERSION}
    ports:
      - "3000:3000"
    depends_on:
      - cc-backend-root-console-develop
    volumes:
      - ../cc-root-console/cc-root-console:/code
    environment:
        <<: *cc-env
        BACKEND_HOST: "cc-backend-root-console-develop"
        BACKEND_PORT: "8080"
        BACKEND_PROTOCOL: "http"
        BACKEND_BASE_URI: "api/v1"
        EMAIL_SERVER_HOST: "mailhog-develop"
        EMAIL_SERVER_PORT: 1026
        EMAIL_SERVER_USER: ""
        EMAIL_SERVER_PASSWORD: ""
        EMAIL_SERVER_FROM: "\"Charity Chest <develop>\""
        REDIS_HOST: "cc-redis-develop"
        REDIS_PORT: 6379
        REDIS_USER: ${REDIS_USERNAME}
        REDIS_PASSWORD: ${REDIS_PASSWORD}
        REDIS_DB: ${REDIS_DB}
        AUTH_ENTRIES: ${AUTH_ENTRIES}
        SECRET: ${SECRET}
    networks:
      - services
  cc-oauth2-forward-tool-server:
    image: charity-chest/oauth2-forward-tool-server-develop
    build:
      context: ../oauth2-forward-tool-server/server
      dockerfile: ../docker/develop/Dockerfile
      args:
        - NODE_VERSION=${OAUTH2_SERVER_NODE_VERSION}
        - ALPINE_VERSION=${OAUTH2_SERVER_ALPINE_VERSION}
    ports:
      - "3001:3000"
    volumes:
      - ../oauth2-forward-tool-server/server:/code
    environment:
      <<: *cc-env
      EMAIL_SERVER_HOST: "mailhog-develop"
      EMAIL_SERVER_PORT: 1026
      EMAIL_SERVER_USER: ""
      EMAIL_SERVER_PASSWORD: ""
      EMAIL_SERVER_FROM: "\"Charity Chest <develop>\""
      REDIS_HOST: "cc-redis-develop"
      REDIS_PORT: 6379
      REDIS_USER: ${REDIS_USERNAME}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      REDIS_AUTH_DB: ${REDIS_AUTH_DB}
      AUTH_ENTRIES: ${AUTH_ENTRIES}
      SECRET: ${SECRET}
    networks:
      - services
  cc-oauth2-forward-tool-client:
    image: charity-chest/oauth2-forward-tool-client-develop
    build:
      context: ../oauth2-forward-tool-client/client
      dockerfile: ../docker/develop/Dockerfile
      args:
        - NODE_VERSION=${OAUTH2_CLIENT_NODE_VERSION}
        - ALPINE_VERSION=${OAUTH2_CLIENT_ALPINE_VERSION}
    ports:
      - "3002:3000"
    depends_on:
      - cc-oauth2-forward-tool-server
    volumes:
      - ../oauth2-forward-tool-client/client:/code
    environment:
      <<: *cc-env
      BACKEND_HOST: "cc-oauth2-forward-tool-server"
      BACKEND_PORT: "3000"
      BACKEND_PROTOCOL: "http"
      BACKEND_BASE_URI: "api/v1"
    networks:
      - services